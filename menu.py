import customtkinter as ctkfrom panels import *class Menu(ctk.CTkTabview):    def __init__(self, parent, pos_vars, color_vars, effect_vars, export_image):        super().__init__(master= parent)        self.grid(row = 0 , column = 0, sticky = 'news', pady = 10, padx = 10)        # Tabs        self.add('Position')        self.add('Color')        self.add('Effects')        self.add('Export')        # widgets        PositionFrame(self.tab('Position'), pos_vars)        ColorFrame(self.tab('Color'), color_vars)        EffectFram(self.tab('Effects'), effect_vars)        ExportFrame(self.tab('Export'), export_image)class PositionFrame(ctk.CTkFrame):    def __init__(self, parent, pos_vars):        super().__init__(master = parent, fg_color = 'transparent')        self.pack(expand = True, fill = 'both')        SegmentedPanel(self, 'invert', pos_vars['flip'], FLIP_OPTIONS)        SliderPanel(self, 'Rotation', pos_vars['rotation'],0 , 360)        SliderPanel(self, 'Zoom', pos_vars['zoom'],0 , 200)        RevertButton(self,            (pos_vars['rotation'], ROTATE_DEFAULT),            (pos_vars['zoom'], ZOOM_DEFAULT),            (pos_vars['flip'], FLIP_OPTIONS[0]))class ColorFrame(ctk.CTkFrame):    def __init__(self, parent, color_vars):        super().__init__(master = parent, fg_color = 'transparent')        self.pack(expand=True, fill='both')        SwitchPanel(self, (color_vars['grayscale'], 'B/W'),(color_vars['invert'], 'Invert'))        SliderPanel(self, 'Brightness', color_vars['brightness'], 0, 5)        SliderPanel(self, 'Vibrance', color_vars['vibrance'], 0, 5)        RevertButton(self,                     (color_vars['brightness'], BRIGHNESS_DEFAULT),                     (color_vars['grayscale'], GRAYSCALE_DEFAULT),                     (color_vars['invert'], INVERT_DEFAULT),                     (color_vars['vibrance'], VIBRANCE_DEFAULT))class EffectFram(ctk.CTkFrame):    def __init__(self, parent, effect_vars):        super().__init__(master= parent, fg_color= 'transparent')        self.pack(expand= True, fill= 'both')        DropDownPanel(self, effect_vars['effect'], EFFECT_OPTIONS)        SliderPanel(self, 'Blur', effect_vars['blur'], 0, 20)        SliderPanel(self, 'Contrast', effect_vars['contrast'], 0, 5)        RevertButton(self,            (effect_vars['blur'], BLUR_DEFAULT),            (effect_vars['contrast'], CONTRAST_DEFAULT),            (effect_vars['effect'], EFFECT_OPTIONS[0]))class ExportFrame(ctk.CTkFrame):    def __init__(self, parent, export_image):        super().__init__(master= parent, fg_color= 'transparent')        self.pack(expand= True, fill='both')        # data        self.name_string = ctk.StringVar()        self.file_string = ctk.StringVar(value= 'jpg')        self.path_string = ctk.StringVar()        # widgets        FileNamePanel(self, self.name_string, self.file_string)        FillPathPanel(self, self.path_string)        SaveButton(self, export_image, self.name_string, self.file_string, self.path_string)